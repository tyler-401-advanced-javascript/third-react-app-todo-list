{"version":3,"sources":["components/Header/Header.js","components/TodoList/TodoList.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","id","className","Filter","filterMenu","TodoList","useState","dones","setDones","todos","setTodos","input","setInput","showing","setShowing","useEffect","updateTitle","document","title","length","handleFinishItem","item","complete","includes","filterResults","filter","type","placeholder","value","onChange","e","target","onClick","preventDefault","split","difficulty","classNames","selected","console","log","map","i","key","done","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34af6de1.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.scss'\n\nfunction Header () {\n  return (\n    <div id='header' className=\"margin\">\n      Super Awesome Todo List \n    </div>\n  )\n}\n\nexport default Header","import React, { useState, useEffect } from 'react'\nimport classNames from 'classnames'\nimport './TodoList.scss'\n\nconst Filter = {\n  ALL: 'ALL',\n  DONE: 'DONE',\n  TODO: 'TODO'\n}\n\nconst filterMenu = {\n  [Filter.DONE]: true,\n  [Filter.TODO]: false,\n}\nfunction TodoList() {\n  const [dones, setDones] = useState([])\n  const [todos, setTodos] = useState([])\n  const [input, setInput] = useState('')\n  const [showing, setShowing] = useState(Filter.ALL)\n\n  useEffect(() => {\n    updateTitle()\n  })\n\n  const updateTitle = () => {\n    document.title = `Todo's: ${todos.length - dones.length}`;\n  }\n\n  const handleFinishItem = (item) => {\n    item.complete = !item.complete\n    if (!dones.includes(item)) setDones([...dones, item])\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const [item, difficulty] = input.split(';')\n    setTodos([...todos, { item, difficulty, complete: false }])\n    setInput('')\n  }\n\n  const handleChange = (e) => {\n    setInput(e.target.value)\n  }\n\n  const filterResults = (filter) => {\n    setShowing(filter);\n  }\n\n  const filterDisplay = () => {\n    console.log(filterMenu[showing])\n\n    //if we are to filter..\n    if (filterMenu[showing] === false || filterMenu[showing] === true) {\n      return function (todos) {\n        return todos.filter(item => item.complete === filterMenu[showing]).map((item, i) => (\n            <li key={i} className={classNames('todoItem', { done: item.complete })}>\n            Thing: {item.item}, Difficulty: {item.difficulty}\n            <input type=\"button\" className=\"doneButton\" onClick={() => handleFinishItem(item)}></input>\n          </li>\n          ))\n      }\n      //else show all\n    } else \n      return function (todos) {\n        return todos.map((item, i) => (\n            <li key={i} className={classNames('todoItem', { done: item.complete })}>\n              Thing: {item.item}, Difficulty: {item.difficulty}\n              <input type=\"button\" className=\"doneButton\" onClick={() => handleFinishItem(item)}></input>\n            </li>\n          ))\n      }\n    }\n\n  return (\n    <div id=\"todoList\">\n      <div className=\"form\">\n        <form>\n          <input type=\"text\" placeholder=\"Thing to do...\" value={input} onChange={handleChange}></input>\n          <input type=\"submit\" value=\"Create!\" onClick={handleSubmit} />\n        </form>\n        <div className=\"select\">\n          <div className={classNames(\"option\", { selected: showing === Filter.ALL })} onClick={() => filterResults(Filter.ALL)}>All</div>\n          <div className={classNames(\"option\", { selected: showing === Filter.DONE })} onClick={() => filterResults(Filter.DONE)}>Done</div>\n          <div className={classNames(\"option\", { selected: showing === Filter.TODO })} onClick={() => filterResults(Filter.TODO)}>To Do</div>\n        </div>\n      </div>\n\n      <ul className=\"list\">\n        { filterDisplay()(todos) }\n      </ul>\n    </div>\n  )\n\n}\n\nexport default TodoList","import React from 'react'\nimport './Footer.scss'\n\n\nfunction Footer() {\n  return (\n    <div id=\"footer\" className=\"margin\">\n      Footer!\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react';\nimport './App.scss'\nimport Header from '../Header/Header.js'\nimport TodoList from '../TodoList/TodoList.js'\nimport Footer from '../Footer/Footer.js'\n\n\nimport './App.scss';\n\nfunction App() {\n\n  //functions here.\n\n  return (\n    <div className=\"App\">\n     <Header />\n     <TodoList />\n     <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}